[project]
name = "gwcs"
description = "Generalized World Coordinate System"
requires-python = ">=3.10"
authors = [
    { name = "gwcs developers", email = "help@stsci.edu" },
]
dependencies = [
    "asdf >= 3.3.0",
    "astropy >= 6.0",
    "numpy>=1.24",
    "scipy>=1.14.1",
    "asdf_wcs_schemas >= 0.4.0",
    "asdf-astropy >= 0.5.0",
]
dynamic = [
    "version",
]

[project.readme]
file = "README.rst"
content-type = "text/x-rst"

[project.license]
file = "licenses/LICENSE.rst"
content-type = "text/x-rst"

[project.urls]
Homepage = "https://github.com/spacetelescope/gwcs"
Tracker = "https://github.com/spacetelescope/gwcs/issues"
Documentation = "https://gwcs.readthedocs.io/en/stable/"
"Source Code" = "https://github.com/spacetelescope/jwst"

[project.entry-points."asdf.extensions"]
gwcs = "gwcs.extension:get_extensions"

[project.optional-dependencies]
docs = [
    "sphinx",
    "sphinx-automodapi",
    "sphinx-rtd-theme",
    "stsci-rtd-theme",
    "sphinx-astropy",
    "sphinx-asdf",
    "tomli; python_version <'3.11'",
]
test = [
    "ci-watson>=0.3.0",
    "pytest>=7.0.0",
    "pytest-astropy>=0.11.0",
]

[build-system]
requires = [
    "setuptools>=61.2",
    "setuptools_scm[toml]>=3.4",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"gwcs.tests.data" = [
    "*",
]

[tool.setuptools.packages.find]
namespaces = false

[tool.build_sphinx]
source-dir = "docs"
build-dir = "docs/_build"
all_files = "1"

[tool.distutils.upload_docs]
upload-dir = "docs/_build/html"
show-response = 1

[tool.pytest.ini_options]
minversion = 4.6
doctest_plus = true
doctest_rst = true
text_file_format = "rst"
addopts = [
    "--color=yes",
    "--doctest-rst",
]
norecursedirs = [
    "build",
    "docs/_build",
    ".tox",
]
filterwarnings = [
    "ignore:Models in math_functions:astropy.utils.exceptions.AstropyUserWarning",
    "ignore:numpy.ndarray size changed:RuntimeWarning",
]

[tool.coverage.run]
omit = [
    "gwcs/tests/test_*",
    "gwcs/tags/tests/test_*",
    "*/gwcs/tests/test_*",
    "*/gwcs/tags/tests/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "except ImportError",
    "raise AssertionError",
    "raise NotImplementedError",
    "def main\\(.*\\):",
    "pragma: py{ignore_python_version}",
]

[tool.setuptools_scm]

[tool.ruff.lint]
select = [
    "F",      # Pyflakes (part of default flake8)
    "W", "E", # pycodestyle (part of default flake8)
    "I",      # isort (import sorting)
    "UP",     # pyupgrade (upgrade code to modern python)
    "YTT",    # flake8-2020 (system version info)
    #"ANN",    # flake8-annotations (best practices for type annotations)
    "S",      # flake8-bandit (security checks)
    "BLE",    # flake8-blind-except (prevent blind except statements)
    "B",      # flake8-bugbear (prevent common gotcha bugs)
    "A",      # flake8-builtins (prevent shadowing of builtins)
    # "C4",     # flake8-comprehensions (best practices for comprehensions)
    "T10",    # flake8-debugger (prevent debugger statements in code)
    "EM",     # flake8-errormessages (best practices for error messages)
    # "FA",     # flake8-future-annotations (correct usage future annotations)
    "ISC",    # flake8-implicit-str-concat (prevent implicit string concat)
    "ICN",    # flake8-import-conventions (enforce import conventions)
    # "INP",    # flake8-no-pep420 (prevent use of PEP420, i.e. implicit name spaces)
    "PIE",    # flake8-pie (misc suggested improvement linting)
    # "T20",    # flake8-print (prevent print statements in code)
    "PT",     # flake8-pytest-style (best practices for pytest)
    "Q",      # flake8-quotes (best practices for quotes)
    "RSE",    # flake8-raise (best practices for raising exceptions)
    "RET",    # flake8-return (best practices for return statements)
    "SIM",    # flake8-simplify (suggest simplifications to code where possible)
    # "TID",    # flake8-tidy-imports (prevent banned api and best import practices)
    # "TCH",    # flake8-type-checking (move type checking imports into type checking blocks)
    # "INT",    # flake8-gettext (when to use printf style strings)
    # "ARG",    # flake8-unused-arguments (prevent unused arguments)
    #"PTH",    # flake8-use-pathlib (prefer pathlib over os.path)
    # "ERA",    # eradicate (remove commented out code)
    # "PGH",    # pygrep (simple grep checks)
    #"PL",     # pylint (general linting, flake8 alternative)
    "TRY",    # tryceratops (linting for try/except blocks)
    "FLY",    # flynt (f-string conversion where possible)
    "NPY",    # NumPy-specific checks (recommendations from NumPy)
    "PERF",   # Perflint (performance linting)
    # "LOG",
    "RUF",    # ruff specific checks
]
ignore = [
    "S101",  # Bandit: Use of assert detected
    "ISC001",  # conflicts with formatter at times
]
